{% if require_secure_connection %}
server {
    listen   80;
    {% if nginx_ipv6 %}
    listen   [::]:80;
    {% endif %}
    server_name {{public_hostname}};
    return 301 https://$host$request_uri;
}
{% endif %}

{% if url_metadata_host %}
upstream urlmetadata {
    server {{url_metadata_host}}:5000;
}
{% endif %}

server {
  {% if accept_secure_connection %}
    listen 443 ssl http2;
    {% if nginx_ipv6 %}
    listen   [::]:443 ssl http2;
    {% endif %}
    {% if use_letsencrypt %}
      ssl_certificate     /etc/letsencrypt/live/{{public_hostname}}/fullchain.pem;
      ssl_certificate_key /etc/letsencrypt/live/{{public_hostname}}/privkey.pem;
    {% endif %}

    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    # Warning: Setting `ssl_session_tickets` to `off` works only if its value is the same for all `server{}` blocks of all server configurations, or if it is set in an `http{}` block. See https://community.letsencrypt.org/t/errors-from-browsers-with-ssl-session-tickets-off-nginx/18124/5 . It is recommended to either set it to `off` (because implementations are not good enough for the moment), or keep forward secrecy by restarting web servers often enough. See https://github.com/mozilla/server-side-tls/issues/135 and https://wiki.mozilla.org/Security/Server_Side_TLS#TLS_tickets_.28RFC_5077.29
    # ssl_session_tickets off;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
    ssl_prefer_server_ciphers on;
    add_header Strict-Transport-Security max-age=15768000;
    ssl_stapling on;
    ssl_stapling_verify on;
    {% if ocsp_path %}
    ssl_trusted_certificate {{ ocsp_path }};
    {% endif %}
    {% if ssl_dhparam %}
    ssl_dhparam {{ ssl_dhparam }};
    {% endif %}

  {% endif %}
  {% if not require_secure_connection %}
    listen    80;
    {% if nginx_ipv6 %}
    listen   [::]:80;
    {% endif %}
  {% endif %}

    add_header x-xss-protection "1; mode=block" always;
    add_header x-frame-options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;

    server_tokens off;
    {% if csp_header %}
    add_header Content-Security-Policy "{{ csp_header }}";
    {% endif %}

    # This is the server name, if you're running multiple servers
    server_name {{public_hostname}};

    {% if disallow_robots %}
    location /robots.txt {
        return 200 "User-agent: *\nDisallow: /";
    }
    {% endif %}

    {% if use_letsencrypt %}
    location /.well-known {
        #This is for domain verification
        alias /var/www/html/.well-known;
    }
    {% endif %}

    {% if changes_websocket_proxied %}
    location /socket {
        proxy_pass http://{{changes_websocket_host}}:{{changes_websocket_port}}{{changes_prefix}};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    {% endif %}

    {% if url_metadata_host %}
    location /urlmetadata/ {
        proxy_http_version 1.1;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Request-Start $msec;
        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;
        rewrite    /urlmetadata/(.*) /$1 break;
        proxy_pass http://urlmetadata;
    }
    {% endif %}

    location /static {
        #Do NOT put something like "expires modified +1h;" here, it WILL cause problems when deploying a new version.
        #Nor will it help your performance after the first hour...
        autoindex off;
        add_header Cache-Control "public, max-age=3600";
        {% if is_cloud %}
            alias {{code_root}}/static;
        {% else %}
            alias {{code_root}}/assembl/static
        {% endif %}
    }

    location ~ ^/private_uploads/(.*) {
      internal;
      {% if attachment_service=='hashfs' %}
      alias {{ projectpath }}/var/uploads;
      {% endif %}
      {% if attachment_service=='s3' %}
        # thanks to https://www.mediasuite.co.nz/blog/proxying-s3-downloads-nginx/
        # TODO: Maybe also send X-Content-Type-Options, cors etc.
        proxy_pass https://{{ attachment_bucket }}.s3.amazonaws.com/$1$is_args$args;
        resolver 8.8.8.8 ipv6=off;
        proxy_set_header Host {{ attachment_bucket }}.s3.amazonaws.com;
        proxy_set_header Authorization '';
        proxy_set_header Cookie '';
        proxy_hide_header Content-Disposition;
        add_header Content-Disposition $upstream_http_content_disposition;
        proxy_max_temp_file_size 0;
      {% endif %}
    }

    location / {
        include uwsgi_params;
        uwsgi_read_timeout 5m;
        {% if uwsgi_port %}
        uwsgi_pass uwsgi://{{ uwsgi_host }}:{{ uwsgi_port }};
        {% else %}
        uwsgi_pass unix://{{ projectpath }}/var/run/uwsgi.sock;
        {% endif %}
    }

  # So files uploaded to the database are not artificailly limited by nginx
  client_max_body_size 500M;

  # Save some bandwidth
  gzip on;
  gzip_http_version 1.1;
  gzip_vary on;
  gzip_comp_level 6;
  gzip_proxied any;
  #text/html is implicit
  gzip_types text/plain text/css application/json application/ld+json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript text/x-js image/svg+xml font/truetype font/opentype application/vnd.ms-fontobject;
}
