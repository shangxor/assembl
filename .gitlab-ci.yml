image: python:2.7

stages:
  # - test
  - build
  - deploy_to_sandbox
  # - test_on_sandbox
  # - deploy_to_uat
  # - deploy_to_prod

cache:
  paths:
    - assembl/static2/node_modules/
    - /usr/local/share/.cache/yarn/v2

# test_frontend:
#   stage: test
#   except:
#     - master
#     - tmp_master_for_ci_cd
#   image: node:10
#   before_script:
#     - export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
#     - cd assembl/static2
#     - yarn
#   script:
#     # This will fail if any test fails or if the coverage has lowered
#     - yarn jest --coverage --maxWorkers 2
#     - yarn run eslint
#     - yarn run stylelint
#     - yarn run flow --quiet

# test_integration_and_ui:
#   stage: test_on_sandbox
#   image: node:10
#   only:
#     - tmp_master_for_ci_cd
#   before_script:
#     - sudo apt-get install python-pip python-dev build-essential
#     - pip install $(grep invoke requirements.in) $(grep semantic-version requirements.in)
#     - "echo '_extends: aws.yaml' > $CI_PROJECT_DIR/invoke.yaml"
#     - touch $CI_PROJECT_DIR/secrets.yamls
#     - ln -s $CI_PROJECT_DIR/assembl/tasks .
#     - inv build.prepare-integration-tests
#   script:
#     # run integration tests
#     - yarn jest tests/integration
#     # run each ui test one by one
#     - yarn runinband

build_wheel:
  stage: build
  only:
    - develop
    - invoke
  artifacts:
    paths:
      - dist/
  before_script:
    - pip install $(grep invoke requirements.in) $(grep semantic-version requirements.in)
    - "echo '_extends: aws.yaml' > $CI_PROJECT_DIR/invoke.yaml"
    - touch $CI_PROJECT_DIR/secrets.yamls
    - ln -s $CI_PROJECT_DIR/assembl/tasks .
    - inv build.prepare-cicd-build
  script:
    # create the wheel and upload to pypi
    - inv build.create-wheel
    - inv build.push-wheelhouse
    - inv build.push-built-themes-to-remote-bucket
    # # - twine upload -u bluenove --skip-existing dist/*
    # Remove ssh files so that the keys are not kept on image prior to travis removal
    # - rm -rf ~/.ssh


push_to_develop_server:
  stage: deploy_to_sandbox
  only:
    - tmp_master_for_ci_cd
    - rws_connections
    - invoke
  before_script:
    - pip install $(grep invoke $CI_PROJECT_DIR/requirements.in) $(grep semantic-version requirements.in)
    # Fetch the configurations of sandbox from S3
    - "echo '_extends: aws.yaml' > $CI_PROJECT_DIR/invoke.yaml"
    - touch $CI_PROJECT_DIR/secrets.yamls
    - ln -s $CI_PROJECT_DIR/assembl/tasks .
  script:
    - inv build.deploy-to-sandbox

# deploy_to_uat:
#   stage: deploy_to_uat
#   only:
#     - tmp_master_for_ci_cd
#     - add_deploy_job
#   script:
#     # empty script for now
#     - echo "Running deployment..."

# deploy_to_prod:
#   stage: deploy_to_prod
#   environment: PROD
#   only:
#     - tmp_master_for_ci_cd
#   script:
#     # fake script for now
#     - python scripts/deploy_to_prod.py
#   when: manual
